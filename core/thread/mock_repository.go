// Code generated by mockery v2.14.0. DO NOT EDIT.

package thread

import mock "github.com/stretchr/testify/mock"

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

// CreateThread provides a mock function with given fields: data, userId, topicId
func (_m *MockRepository) CreateThread(data *Domain, userId int, topicId int) (Domain, error) {
	ret := _m.Called(data, userId, topicId)

	var r0 Domain
	if rf, ok := ret.Get(0).(func(*Domain, int, int) Domain); ok {
		r0 = rf(data, userId, topicId)
	} else {
		r0 = ret.Get(0).(Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*Domain, int, int) error); ok {
		r1 = rf(data, userId, topicId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteThread provides a mock function with given fields: userId, threadId
func (_m *MockRepository) DeleteThread(userId int, threadId int) error {
	ret := _m.Called(userId, threadId)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int) error); ok {
		r0 = rf(userId, threadId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetThreadByAuthorID provides a mock function with given fields: userId, limit, offset
func (_m *MockRepository) GetThreadByAuthorID(userId int, limit int, offset int) ([]Domain, error) {
	ret := _m.Called(userId, limit, offset)

	var r0 []Domain
	if rf, ok := ret.Get(0).(func(int, int, int) []Domain); ok {
		r0 = rf(userId, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int, int) error); ok {
		r1 = rf(userId, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetThreadByID provides a mock function with given fields: threadId
func (_m *MockRepository) GetThreadByID(threadId int) (Domain, error) {
	ret := _m.Called(threadId)

	var r0 Domain
	if rf, ok := ret.Get(0).(func(int) Domain); ok {
		r0 = rf(threadId)
	} else {
		r0 = ret.Get(0).(Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(threadId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetThreadByKeyword provides a mock function with given fields: keyword, limit, offset
func (_m *MockRepository) GetThreadByKeyword(keyword string, limit int, offset int) ([]Domain, error) {
	ret := _m.Called(keyword, limit, offset)

	var r0 []Domain
	if rf, ok := ret.Get(0).(func(string, int, int) []Domain); ok {
		r0 = rf(keyword, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, int, int) error); ok {
		r1 = rf(keyword, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetThreadByTopicID provides a mock function with given fields: topicId, limit, offset
func (_m *MockRepository) GetThreadByTopicID(topicId int, limit int, offset int) ([]Domain, error) {
	ret := _m.Called(topicId, limit, offset)

	var r0 []Domain
	if rf, ok := ret.Get(0).(func(int, int, int) []Domain); ok {
		r0 = rf(topicId, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int, int) error); ok {
		r1 = rf(topicId, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Like provides a mock function with given fields: userId, threadId
func (_m *MockRepository) Like(userId int, threadId int) error {
	ret := _m.Called(userId, threadId)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int) error); ok {
		r0 = rf(userId, threadId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UndoLike provides a mock function with given fields: userId, threadId
func (_m *MockRepository) UndoLike(userId int, threadId int) error {
	ret := _m.Called(userId, threadId)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int) error); ok {
		r0 = rf(userId, threadId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UndoUnlike provides a mock function with given fields: userId, threadId
func (_m *MockRepository) UndoUnlike(userId int, threadId int) error {
	ret := _m.Called(userId, threadId)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int) error); ok {
		r0 = rf(userId, threadId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Unlike provides a mock function with given fields: userId, threadId
func (_m *MockRepository) Unlike(userId int, threadId int) error {
	ret := _m.Called(userId, threadId)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int) error); ok {
		r0 = rf(userId, threadId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateThread provides a mock function with given fields: data, userId, threadId
func (_m *MockRepository) UpdateThread(data *Domain, userId int, threadId int) (Domain, error) {
	ret := _m.Called(data, userId, threadId)

	var r0 Domain
	if rf, ok := ret.Get(0).(func(*Domain, int, int) Domain); ok {
		r0 = rf(data, userId, threadId)
	} else {
		r0 = ret.Get(0).(Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*Domain, int, int) error); ok {
		r1 = rf(data, userId, threadId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMockRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockRepository creates a new instance of MockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockRepository(t mockConstructorTestingTNewMockRepository) *MockRepository {
	mock := &MockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
