// Code generated by mockery v2.14.0. DO NOT EDIT.

package auth

import (
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

// DeleteAuth provides a mock function with given fields: uuid
func (_m *MockRepository) DeleteAuth(uuid string) error {
	ret := _m.Called(uuid)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(uuid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FetchAuth provides a mock function with given fields: uuid
func (_m *MockRepository) FetchAuth(uuid string) (int, error) {
	ret := _m.Called(uuid)

	var r0 int
	if rf, ok := ret.Get(0).(func(string) int); ok {
		r0 = rf(uuid)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(uuid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StoreAuth provides a mock function with given fields: userId, accessUuid, refreshUuid, accessExpiry, refreshExpiry
func (_m *MockRepository) StoreAuth(userId int, accessUuid string, refreshUuid string, accessExpiry time.Duration, refreshExpiry time.Duration) error {
	ret := _m.Called(userId, accessUuid, refreshUuid, accessExpiry, refreshExpiry)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, string, string, time.Duration, time.Duration) error); ok {
		r0 = rf(userId, accessUuid, refreshUuid, accessExpiry, refreshExpiry)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewMockRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockRepository creates a new instance of MockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockRepository(t mockConstructorTestingTNewMockRepository) *MockRepository {
	mock := &MockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
