// Code generated by mockery v2.14.0. DO NOT EDIT.

package report

import mock "github.com/stretchr/testify/mock"

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

// AddReason provides a mock function with given fields: data
func (_m *MockRepository) AddReason(data *Domain) error {
	ret := _m.Called(data)

	var r0 error
	if rf, ok := ret.Get(0).(func(*Domain) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ApproveReplyReport provides a mock function with given fields: reporterId, replyId
func (_m *MockRepository) ApproveReplyReport(reporterId uint, replyId uint) error {
	ret := _m.Called(reporterId, replyId)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, uint) error); ok {
		r0 = rf(reporterId, replyId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ApproveThreadReport provides a mock function with given fields: reporterId, threadId
func (_m *MockRepository) ApproveThreadReport(reporterId uint, threadId uint) error {
	ret := _m.Called(reporterId, threadId)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, uint) error); ok {
		r0 = rf(reporterId, threadId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ApproveTopicReport provides a mock function with given fields: reporterId, replyId
func (_m *MockRepository) ApproveTopicReport(reporterId uint, replyId uint) error {
	ret := _m.Called(reporterId, replyId)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, uint) error); ok {
		r0 = rf(reporterId, replyId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ApproveUserReport provides a mock function with given fields: reporterId, suspectId
func (_m *MockRepository) ApproveUserReport(reporterId uint, suspectId uint) error {
	ret := _m.Called(reporterId, suspectId)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, uint) error); ok {
		r0 = rf(reporterId, suspectId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteReason provides a mock function with given fields: reasonId
func (_m *MockRepository) DeleteReason(reasonId uint) error {
	ret := _m.Called(reasonId)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(reasonId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ForwardReplyReport provides a mock function with given fields: reporterId, replyId
func (_m *MockRepository) ForwardReplyReport(reporterId uint, replyId uint) error {
	ret := _m.Called(reporterId, replyId)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, uint) error); ok {
		r0 = rf(reporterId, replyId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ForwardThreadReport provides a mock function with given fields: reporterId, threadId
func (_m *MockRepository) ForwardThreadReport(reporterId uint, threadId uint) error {
	ret := _m.Called(reporterId, threadId)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, uint) error); ok {
		r0 = rf(reporterId, threadId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetReasons provides a mock function with given fields:
func (_m *MockRepository) GetReasons() ([]Domain, error) {
	ret := _m.Called()

	var r0 []Domain
	if rf, ok := ret.Get(0).(func() []Domain); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReplyReports provides a mock function with given fields: limit, offset
func (_m *MockRepository) GetReplyReports(limit int, offset int) ([]Domain, error) {
	ret := _m.Called(limit, offset)

	var r0 []Domain
	if rf, ok := ret.Get(0).(func(int, int) []Domain); ok {
		r0 = rf(limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetThreadReports provides a mock function with given fields: limit, offset
func (_m *MockRepository) GetThreadReports(limit int, offset int) ([]Domain, error) {
	ret := _m.Called(limit, offset)

	var r0 []Domain
	if rf, ok := ret.Get(0).(func(int, int) []Domain); ok {
		r0 = rf(limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTopicReplyReports provides a mock function with given fields: topicId, limit, offset
func (_m *MockRepository) GetTopicReplyReports(topicId int, limit int, offset int) ([]Domain, error) {
	ret := _m.Called(topicId, limit, offset)

	var r0 []Domain
	if rf, ok := ret.Get(0).(func(int, int, int) []Domain); ok {
		r0 = rf(topicId, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int, int) error); ok {
		r1 = rf(topicId, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTopicReports provides a mock function with given fields: limit, offset
func (_m *MockRepository) GetTopicReports(limit int, offset int) ([]Domain, error) {
	ret := _m.Called(limit, offset)

	var r0 []Domain
	if rf, ok := ret.Get(0).(func(int, int) []Domain); ok {
		r0 = rf(limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTopicThreadReports provides a mock function with given fields: topicId, limit, offset
func (_m *MockRepository) GetTopicThreadReports(topicId int, limit int, offset int) ([]Domain, error) {
	ret := _m.Called(topicId, limit, offset)

	var r0 []Domain
	if rf, ok := ret.Get(0).(func(int, int, int) []Domain); ok {
		r0 = rf(topicId, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int, int) error); ok {
		r1 = rf(topicId, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserReports provides a mock function with given fields: limit, offset
func (_m *MockRepository) GetUserReports(limit int, offset int) ([]Domain, error) {
	ret := _m.Called(limit, offset)

	var r0 []Domain
	if rf, ok := ret.Get(0).(func(int, int) []Domain); ok {
		r0 = rf(limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveReplyReport provides a mock function with given fields: reporterId, replyId
func (_m *MockRepository) RemoveReplyReport(reporterId uint, replyId uint) error {
	ret := _m.Called(reporterId, replyId)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, uint) error); ok {
		r0 = rf(reporterId, replyId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveThreadReport provides a mock function with given fields: reporterId, threadId
func (_m *MockRepository) RemoveThreadReport(reporterId uint, threadId uint) error {
	ret := _m.Called(reporterId, threadId)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, uint) error); ok {
		r0 = rf(reporterId, threadId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveTopicReport provides a mock function with given fields: reporterId, replyId
func (_m *MockRepository) RemoveTopicReport(reporterId uint, replyId uint) error {
	ret := _m.Called(reporterId, replyId)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, uint) error); ok {
		r0 = rf(reporterId, replyId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveUserReport provides a mock function with given fields: reporterId, suspectId
func (_m *MockRepository) RemoveUserReport(reporterId uint, suspectId uint) error {
	ret := _m.Called(reporterId, suspectId)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, uint) error); ok {
		r0 = rf(reporterId, suspectId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReportReply provides a mock function with given fields: reporterId, replyId, reasonId
func (_m *MockRepository) ReportReply(reporterId uint, replyId uint, reasonId uint) (Domain, error) {
	ret := _m.Called(reporterId, replyId, reasonId)

	var r0 Domain
	if rf, ok := ret.Get(0).(func(uint, uint, uint) Domain); ok {
		r0 = rf(reporterId, replyId, reasonId)
	} else {
		r0 = ret.Get(0).(Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, uint, uint) error); ok {
		r1 = rf(reporterId, replyId, reasonId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReportThread provides a mock function with given fields: reporterId, threadId, reasonId
func (_m *MockRepository) ReportThread(reporterId uint, threadId uint, reasonId uint) (Domain, error) {
	ret := _m.Called(reporterId, threadId, reasonId)

	var r0 Domain
	if rf, ok := ret.Get(0).(func(uint, uint, uint) Domain); ok {
		r0 = rf(reporterId, threadId, reasonId)
	} else {
		r0 = ret.Get(0).(Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, uint, uint) error); ok {
		r1 = rf(reporterId, threadId, reasonId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReportTopic provides a mock function with given fields: reporterId, topicId, reasonId
func (_m *MockRepository) ReportTopic(reporterId uint, topicId uint, reasonId uint) (Domain, error) {
	ret := _m.Called(reporterId, topicId, reasonId)

	var r0 Domain
	if rf, ok := ret.Get(0).(func(uint, uint, uint) Domain); ok {
		r0 = rf(reporterId, topicId, reasonId)
	} else {
		r0 = ret.Get(0).(Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, uint, uint) error); ok {
		r1 = rf(reporterId, topicId, reasonId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReportUser provides a mock function with given fields: reporterId, suspectId, reasonId
func (_m *MockRepository) ReportUser(reporterId uint, suspectId uint, reasonId uint) (Domain, error) {
	ret := _m.Called(reporterId, suspectId, reasonId)

	var r0 Domain
	if rf, ok := ret.Get(0).(func(uint, uint, uint) Domain); ok {
		r0 = rf(reporterId, suspectId, reasonId)
	} else {
		r0 = ret.Get(0).(Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, uint, uint) error); ok {
		r1 = rf(reporterId, suspectId, reasonId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMockRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockRepository creates a new instance of MockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockRepository(t mockConstructorTestingTNewMockRepository) *MockRepository {
	mock := &MockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
