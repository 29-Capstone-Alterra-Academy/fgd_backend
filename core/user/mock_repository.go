// Code generated by mockery v2.14.0. DO NOT EDIT.

package user

import mock "github.com/stretchr/testify/mock"

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

// CheckEmailAvailibility provides a mock function with given fields: email
func (_m *MockRepository) CheckEmailAvailibility(email string) bool {
	ret := _m.Called(email)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(email)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// CheckIsAdmin provides a mock function with given fields: userId
func (_m *MockRepository) CheckIsAdmin(userId int) (bool, error) {
	ret := _m.Called(userId)

	var r0 bool
	if rf, ok := ret.Get(0).(func(int) bool); ok {
		r0 = rf(userId)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckUserAvailibility provides a mock function with given fields: username
func (_m *MockRepository) CheckUserAvailibility(username string) bool {
	ret := _m.Called(username)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(username)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// CreateUser provides a mock function with given fields: data
func (_m *MockRepository) CreateUser(data *Domain) (Domain, error) {
	ret := _m.Called(data)

	var r0 Domain
	if rf, ok := ret.Get(0).(func(*Domain) Domain); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Get(0).(Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*Domain) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FollowUser provides a mock function with given fields: userId, targetId
func (_m *MockRepository) FollowUser(userId int, targetId int) error {
	ret := _m.Called(userId, targetId)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int) error); ok {
		r0 = rf(userId, targetId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetFollowers provides a mock function with given fields: userId
func (_m *MockRepository) GetFollowers(userId int) ([]Domain, error) {
	ret := _m.Called(userId)

	var r0 []Domain
	if rf, ok := ret.Get(0).(func(int) []Domain); ok {
		r0 = rf(userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFollowing provides a mock function with given fields: userId
func (_m *MockRepository) GetFollowing(userId int) ([]Domain, error) {
	ret := _m.Called(userId)

	var r0 []Domain
	if rf, ok := ret.Get(0).(func(int) []Domain); ok {
		r0 = rf(userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetModeratedTopic provides a mock function with given fields: userId
func (_m *MockRepository) GetModeratedTopic(userId int) (Domain, error) {
	ret := _m.Called(userId)

	var r0 Domain
	if rf, ok := ret.Get(0).(func(int) Domain); ok {
		r0 = rf(userId)
	} else {
		r0 = ret.Get(0).(Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetModerators provides a mock function with given fields: topicId
func (_m *MockRepository) GetModerators(topicId int) ([]Domain, error) {
	ret := _m.Called(topicId)

	var r0 []Domain
	if rf, ok := ret.Get(0).(func(int) []Domain); ok {
		r0 = rf(topicId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(topicId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPersonalProfile provides a mock function with given fields: userId
func (_m *MockRepository) GetPersonalProfile(userId int) (Domain, error) {
	ret := _m.Called(userId)

	var r0 Domain
	if rf, ok := ret.Get(0).(func(int) Domain); ok {
		r0 = rf(userId)
	} else {
		r0 = ret.Get(0).(Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProfileByID provides a mock function with given fields: userId
func (_m *MockRepository) GetProfileByID(userId int) (Domain, error) {
	ret := _m.Called(userId)

	var r0 Domain
	if rf, ok := ret.Get(0).(func(int) Domain); ok {
		r0 = rf(userId)
	} else {
		r0 = ret.Get(0).(Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByEmail provides a mock function with given fields: email
func (_m *MockRepository) GetUserByEmail(email string) (Domain, error) {
	ret := _m.Called(email)

	var r0 Domain
	if rf, ok := ret.Get(0).(func(string) Domain); ok {
		r0 = rf(email)
	} else {
		r0 = ret.Get(0).(Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByUsername provides a mock function with given fields: username
func (_m *MockRepository) GetUserByUsername(username string) (Domain, error) {
	ret := _m.Called(username)

	var r0 Domain
	if rf, ok := ret.Get(0).(func(string) Domain); ok {
		r0 = rf(username)
	} else {
		r0 = ret.Get(0).(Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUsers provides a mock function with given fields: limit, offset
func (_m *MockRepository) GetUsers(limit int, offset int) ([]Domain, error) {
	ret := _m.Called(limit, offset)

	var r0 []Domain
	if rf, ok := ret.Get(0).(func(int, int) []Domain); ok {
		r0 = rf(limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUsersByKeyword provides a mock function with given fields: keyword, limit, offset
func (_m *MockRepository) GetUsersByKeyword(keyword string, limit int, offset int) ([]Domain, error) {
	ret := _m.Called(keyword, limit, offset)

	var r0 []Domain
	if rf, ok := ret.Get(0).(func(string, int, int) []Domain); ok {
		r0 = rf(keyword, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, int, int) error); ok {
		r1 = rf(keyword, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UnfollowUser provides a mock function with given fields: userId, targetId
func (_m *MockRepository) UnfollowUser(userId int, targetId int) error {
	ret := _m.Called(userId, targetId)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int) error); ok {
		r0 = rf(userId, targetId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdatePassword provides a mock function with given fields: hashedPassword, userId
func (_m *MockRepository) UpdatePassword(hashedPassword string, userId int) error {
	ret := _m.Called(hashedPassword, userId)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, int) error); ok {
		r0 = rf(hashedPassword, userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdatePersonalProfile provides a mock function with given fields: data, userId
func (_m *MockRepository) UpdatePersonalProfile(data *Domain, userId int) (Domain, error) {
	ret := _m.Called(data, userId)

	var r0 Domain
	if rf, ok := ret.Get(0).(func(*Domain, int) Domain); ok {
		r0 = rf(data, userId)
	} else {
		r0 = ret.Get(0).(Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*Domain, int) error); ok {
		r1 = rf(data, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMockRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockRepository creates a new instance of MockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockRepository(t mockConstructorTestingTNewMockRepository) *MockRepository {
	mock := &MockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
