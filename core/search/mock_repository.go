// Code generated by mockery v2.14.0. DO NOT EDIT.

package search

import mock "github.com/stretchr/testify/mock"

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

// GetLastSearchHistory provides a mock function with given fields: userId, limit
func (_m *MockRepository) GetLastSearchHistory(userId uint, limit int) ([]Domain, error) {
	ret := _m.Called(userId, limit)

	var r0 []Domain
	if rf, ok := ret.Get(0).(func(uint, int) []Domain); ok {
		r0 = rf(userId, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, int) error); ok {
		r1 = rf(userId, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QuerySearchHistory provides a mock function with given fields: userId, keyword, limit
func (_m *MockRepository) QuerySearchHistory(userId uint, keyword string, limit int) ([]Domain, error) {
	ret := _m.Called(userId, keyword, limit)

	var r0 []Domain
	if rf, ok := ret.Get(0).(func(uint, string, int) []Domain); ok {
		r0 = rf(userId, keyword, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, string, int) error); ok {
		r1 = rf(userId, keyword, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StoreSearchKeyword provides a mock function with given fields: userId, data
func (_m *MockRepository) StoreSearchKeyword(userId uint, data *Domain) error {
	ret := _m.Called(userId, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, *Domain) error); ok {
		r0 = rf(userId, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewMockRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockRepository creates a new instance of MockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockRepository(t mockConstructorTestingTNewMockRepository) *MockRepository {
	mock := &MockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
