// Code generated by mockery v2.14.0. DO NOT EDIT.

package topic

import mock "github.com/stretchr/testify/mock"

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

// CheckTopicAvailibility provides a mock function with given fields: topicName
func (_m *MockRepository) CheckTopicAvailibility(topicName string) bool {
	ret := _m.Called(topicName)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(topicName)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// CreateTopic provides a mock function with given fields: data
func (_m *MockRepository) CreateTopic(data *Domain) (Domain, error) {
	ret := _m.Called(data)

	var r0 Domain
	if rf, ok := ret.Get(0).(func(*Domain) Domain); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Get(0).(Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*Domain) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSubscribedTopics provides a mock function with given fields: userId
func (_m *MockRepository) GetSubscribedTopics(userId int) ([]Domain, error) {
	ret := _m.Called(userId)

	var r0 []Domain
	if rf, ok := ret.Get(0).(func(int) []Domain); ok {
		r0 = rf(userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTopicDetails provides a mock function with given fields: topicId
func (_m *MockRepository) GetTopicDetails(topicId int) (Domain, error) {
	ret := _m.Called(topicId)

	var r0 Domain
	if rf, ok := ret.Get(0).(func(int) Domain); ok {
		r0 = rf(topicId)
	} else {
		r0 = ret.Get(0).(Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(topicId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTopics provides a mock function with given fields: limit, offset, sort_by
func (_m *MockRepository) GetTopics(limit int, offset int, sort_by string) ([]Domain, error) {
	ret := _m.Called(limit, offset, sort_by)

	var r0 []Domain
	if rf, ok := ret.Get(0).(func(int, int, string) []Domain); ok {
		r0 = rf(limit, offset, sort_by)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int, string) error); ok {
		r1 = rf(limit, offset, sort_by)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTopicsByKeyword provides a mock function with given fields: keyword, limit, offset
func (_m *MockRepository) GetTopicsByKeyword(keyword string, limit int, offset int) ([]Domain, error) {
	ret := _m.Called(keyword, limit, offset)

	var r0 []Domain
	if rf, ok := ret.Get(0).(func(string, int, int) []Domain); ok {
		r0 = rf(keyword, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, int, int) error); ok {
		r1 = rf(keyword, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Subscribe provides a mock function with given fields: userId, topicId
func (_m *MockRepository) Subscribe(userId int, topicId int) error {
	ret := _m.Called(userId, topicId)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int) error); ok {
		r0 = rf(userId, topicId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Unsubscribe provides a mock function with given fields: userId, topicId
func (_m *MockRepository) Unsubscribe(userId int, topicId int) error {
	ret := _m.Called(userId, topicId)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int) error); ok {
		r0 = rf(userId, topicId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateTopic provides a mock function with given fields: data, topicId
func (_m *MockRepository) UpdateTopic(data *Domain, topicId int) (Domain, error) {
	ret := _m.Called(data, topicId)

	var r0 Domain
	if rf, ok := ret.Get(0).(func(*Domain, int) Domain); ok {
		r0 = rf(data, topicId)
	} else {
		r0 = ret.Get(0).(Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*Domain, int) error); ok {
		r1 = rf(data, topicId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMockRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockRepository creates a new instance of MockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockRepository(t mockConstructorTestingTNewMockRepository) *MockRepository {
	mock := &MockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
